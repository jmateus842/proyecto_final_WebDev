const ProductService = require('./src/services/ProductService');
const CategoryService = require('./src/services/CategoryService');

async function analyzeParameters() {
    console.log('üîç ANALIZANDO PAR√ÅMETROS QUE PODR√çAN CAUSAR ERRORES 500\n');

    // 1. Analizar ProductService.listProducts
    console.log('üìã PRODUCTSERVICE.LISTPRODUCTS - Par√°metros esperados:');
    console.log('- page: number (default: 1)');
    console.log('- limit: number (default: 10)');
    console.log('- search: string (default: "")');
    console.log('- categoryId: number | null (default: null)');
    console.log('- minPrice: number | null (default: null)');
    console.log('- maxPrice: number | null (default: null)');
    console.log('- is_active: boolean (default: true)');
    console.log('- sortBy: string (default: "created_at")');
    console.log('- sortOrder: string (default: "DESC")');
    console.log('- includeCategory: boolean (default: true)');
    console.log('- includeInventory: boolean (default: true)\n');

    // 2. Analizar ProductController.getAllProducts
    console.log('üìã PRODUCTCONTROLLER.GETALLPRODUCTS - Par√°metros recibidos:');
    console.log('- page: string (from query)');
    console.log('- limit: string (from query)');
    console.log('- search: string (from query)');
    console.log('- category_id: string (from query)');
    console.log('- min_price: string (from query)');
    console.log('- max_price: string (from query)');
    console.log('- in_stock: string (from query)');
    console.log('- sort_by: string (from query)');
    console.log('- sort_order: string (from query)\n');

    // 3. Analizar CategoryService.getAllCategories
    console.log('üìã CATEGORYSERVICE.GETALLCATEGORIES - Par√°metros esperados:');
    console.log('- activeOnly: boolean (default: false)\n');

    // 4. Analizar CategoryController.getAllCategories
    console.log('üìã CATEGORYCONTROLLER.GETALLCATEGORIES - Par√°metros recibidos:');
    console.log('- active_only: string (from query)\n');

    // 5. Probar diferentes combinaciones de par√°metros
    console.log('üß™ PROBANDO DIFERENTES COMBINACIONES DE PAR√ÅMETROS:\n');

    const testCases = [
        { name: 'Caso 1: Sin par√°metros', options: {} },
        { name: 'Caso 2: Solo paginaci√≥n', options: { page: 1, limit: 10 } },
        { name: 'Caso 3: Con b√∫squeda', options: { search: 'laptop' } },
        { name: 'Caso 4: Con categor√≠a', options: { categoryId: 1 } },
        { name: 'Caso 5: Con filtros de precio', options: { minPrice: 100, maxPrice: 1000 } },
        { name: 'Caso 6: Par√°metros inv√°lidos', options: { page: 'invalid', limit: 'invalid' } },
        { name: 'Caso 7: Par√°metros extremos', options: { page: -1, limit: 0 } }
    ];

    for (const testCase of testCases) {
        try {
            console.log(`\nüîç ${testCase.name}:`);
            console.log('Par√°metros:', testCase.options);
            
            const result = await ProductService.listProducts(testCase.options);
            console.log('‚úÖ √âxito - Productos encontrados:', result.products.length);
            
        } catch (error) {
            console.log('‚ùå Error:', error.message);
        }
    }

    // 6. Probar CategoryService
    console.log('\nüß™ PROBANDO CATEGORYSERVICE:\n');

    try {
        console.log('üîç Probando getAllCategories sin par√°metros:');
        const categories = await CategoryService.getAllCategories();
        console.log('‚úÖ √âxito - Categor√≠as encontradas:', categories.length);
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }

    try {
        console.log('\nüîç Probando getAllCategories con activeOnly=true:');
        const activeCategories = await CategoryService.getAllCategories({ activeOnly: true });
        console.log('‚úÖ √âxito - Categor√≠as activas encontradas:', activeCategories.length);
    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
}

analyzeParameters().catch(console.error);
